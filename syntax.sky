// Import statement
use io;
use io.print as print;
use io.endline as endline;

// Types:
// Int 
// Float 
// Char 
// String 
// Byte 
// Bool 
// Void -> used for pointers. i.e. Void*
// None 
// Usize
// Isize

// Special types: | These are build in!
// Enum    -> struct type 
// Compact -> struct type
// Loose   -> struct type
// Union   -> struct type
// Vector
// Matrix
// Error
// Complex
// SizeableArray
// FixedArray
// HashMap

// Keywords:
// func
// namespace
// private
// public
// struct
// switch
// return
// if 
// else 
// finally
// impl
// mut
// const
// defer
// break
// continue
// for 
// while 
// loop 
// signed 
// unsigned 
// use 
// as

// Variable declaration | Note, these are globals
// Explicit typing
mut a : Int;            // defines a mutables | defaults to zero
const b : Float = 32;   // defines a constant
// Implicit typing
const hello := "Hello"; // Hello would be a String type

namespace Example {
    const c : Int = 77;
    // Function definition
    func foo(a: Int, b: Int) : None {
        // a and b are seperate from the global a and b
        print("A: <>, B: <>\n", a, b);
    
        // To call a global (only if the variable is redefined in scope)
        if $a != a {
            print("Global A and Scoped A are not equal!\n");
        } else {
            print("Global A and Scoped A are equal!\n");
        }
    
        // Since C isn't redefined in this scope, it doesn't need to be preceded by '$'
        print("C: <>\n", c);
    }
    // Unsigned function definition
    func buzz : String { return "Unsigned functions?"; }
}

func specialTypes : None {

    // Vectors | Note: Vectors are autosized based on ammount of inputs
    // 2d Vector
    const vec2 := Vector{ x: 7, y: 8 };
    const vec3 : Vector = { x: 9, y: 10, z: 6.1 };
    const vec4 := Vector{ x: 1, y: 5.10, z: 1, w: 0.1};
    // Explicit vector typing
    const complexVec3 := Vector<Complex>{ 
        x: 7 + 8i,
        y: -11.4 + 0.01i,
        z: 7, // z: 7 + 0i
    }

    vec2.print();
    vec3.print();
    vec4.print();
    complexVec3.print();

    // Matrixes | Can be to any size
    const mat3x3 := Matrix{
        [1, 1, 0],
        [0, 0, 1],
        [1, 0, 0],
    }

    mat3x3.print();

    // Errors
    const err := Error{
        type:    ErrorGeneric,
        message: "This is an error!",
    }

    err.print();

    // Complex numbers
    const cplex1 := Complex{ 9 + 8i };
    const cplex2 : Complex = 8 + 3i;
    const cplex3 := 9 - 7i;

    cplex1.print();
    cplex2.print();
    cplex3.print();

    // Note: Array and Hash types must be typed with <>
    // Array typing SizeableArray<type, size (optional)>
    mut sArray := SizeableArray<String>{"Hello", "world"};
    sArray.push("PUSHED");
    sArray.push_front("TRASH");

    const sTopElement := sArray.pop(); // returns and pops "TRASH"
    const sLastElement := sArray.pop_last(); // returns and pops "PUSHED"

    print("Sizeable Array: Top: <>, Last: <>\n", sTopElement, sLastElement);

    const fArray : FixedArray<Int, 10> = {1, 2, 3}; // the rest will be types default value

    const fTopElement := fArray.top(); // returns 1
    const fLastElement := fArray.last(); // return 0;

    print("Fixed Array: Top: <>, Last: <>\n", fTopElement, fLastElement);

    // HashMap tying HashMap<type, type, hashing function (optional, defaults to SHA3)>
    mut map : HashMap<String, Int> = {
        ["Hello", 8],
        ["Bye", 8],
        ["Skyward", 9],
    };

    map.insert("Skynet", 9);

    if map.has("Hello") : print("Hello: <>\n", map.get("Hello")); // will execute
    if map.has("Fish")  : print("Fish: <>\n", map.get("Fish"));   // will not execute

}

func control_flow : None {
    // if statment
    if a > b {
        print("A is bigger than B\n");
    } else if a == b {
        print("A and B are the same\n");
    } else {
        print("A is less than B\n");
    }

    // switch statement
    switch hello {
        "Hello" => print("Hello world\n"); break;
        "Goodbye" =>
            print("Goodnight world!\n"); 
            break;
        else => {
            print("Thats not how you say a greeting!\n");
            break;
        }
        finally => print("This prints every time!\n");
    }

    const animal := "Kangaroo";

    // can also switch on statements
    switch animal.first() {
        'A'..'Z' => {
            print("Is capitolized!");
            break;
        }
        'a'..'z' => {
            print("Is lowercase!");
            break;
        }
        finally => { // Runs for all cases, unless an error occurs
            endline(); // Ads a newline (/r/n)
            break;
        }
    }

}

func loops : None {
    // For loop
    for i : Int = 0; i < 100; i++ {
        print("Print looooooop\n");
        print("Itter: <>\n", i); // Type reflection?? CAN YOUR C DO THAT - Tsoding
    }

    // while loop
    while True {
        i : Int = 0;
        // You can define if statements like this only if there is no else/else ifs
        if i >= 10 : break;

        i *= 10;
    }

    // forever loop, only breaks if there is a condition to break
    mut name := "Skyward";
    mut i = name.len();
    loop {
        if name == "" : break;
        print("<>\n", name);
        i--;
        name := name[0:i];
    }
}

// Struct definition
struct Employee : Compact {
    Status: struct EmployeeStatus : Enum {
        @start 0;
        @step  1000;

        ADMIN,   // 0000
        MANAGER, // 1000
        ENTRY,   // 2000
        GUEST,   // 3000
    }
    Name: String;
    ID:   Int;
}

// Define member functions for Employee
Employee : impl {
    // A member variable
    // Private member variables can only be used within scope
    private mut seed : Int = 0;

    public func new(status: EmployeeStatus, name: String) : Employee {
        defer seed++; // Defer seed++ until end of scope
        return Employee {
            Status: status,
            Name: name,
            ID: status + seed,
        };
    }

    public func print : None {
        print("Employee:\n");
        print("Name: <>\n", self.Name);
        print("Status: <>\n", self.Status);
        print("ID: <>\n", self.ID.human());
    }
}

// Define member functions for Employee::EmployeeStatus
Employee::EmployeeStatus : impl {
    // Declare an unsigned function (working name)
    // With untyped functions, self is assumed.
    // Traditional functions must explicitly call
    // self as the fist parameter.
    public func human : String {
        switch self {
            ADMIN   => return "Admin";
            MANAGER => return "Manager";
            ENTRY   => return "Entry";
            GUEST   => return "Guest";
            else    => return "Unknown";
        }
    }
}

// Entry point for program
func main() : Int {
    // Reassignment
    hello := "Goodbye";

    use Employee::EmployeeStatus as Status; // Use statement is only valid for scope
    const CEO := Employee.new(status: Status::ADMIN, name: "Ashton");

    CEO.print();

    specialTypes();
    control_flow();
    loops();

    Example::foo();
    Example::buzz();

    return 0;
}