use io;

struct EmployeeStatus : Enum {
    @start 0;
    @step 1000;

    ADMIN,
    MANAGER,
    ENTRY,
    GUEST,
}

EmployeeStatus : impl {

    public func human : Char* {
        switch(self) {
        ADMIN => return "Admin";
        MANAGER => return "Manager";
        ENTRY => return "Entry";
        else => return "Unknown";
        }
    }
}

struct Employee : Compact {
    Status: EmployeeStatus,
    Name:   Char*,
    ID:     Int,
}

Employee : impl {

    private mut seed : Int = 0;

    public func new(status: EmployeeStatus, name: Char*) : Employee {
        defer seed++;

        return Employee {
            Status: status,
            Name: name,
            ID: status + seed,
        }
    }

    public func print : None {
        io.print("Employee\n");
        io.print("Name: <>\n", self.Name);
        io.print("Status: <>\n", self.Status);
        io.print("ID: <>\n", self.ID);
    }

}

func main() : Int {
    const employee : Employee = Employee.new(ADMIN, "Steve");

    employee.print();

    return 0;
}